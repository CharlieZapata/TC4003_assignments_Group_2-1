package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	f := func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	}
	value = strings.Replace(value, ".", " ", -1) //Corner case, word1.Word2 was considered as 1 big word
	m := make(map[string]int)
	for _, word := range strings.FieldsFunc(value, f) {
		if len(word) > 0 {
			m[word] = m[word] + 1
		}
	}
	var words []mapreduce.KeyValue
	for k, v := range m { //Transform map to WordCount Array
		words = append(words, mapreduce.KeyValue{k, strconv.Itoa(v)})
	}
	return words
	/*	value = strings.Replace(value, ".", " ", -1) //Corner case, word1.Word2 was considered as 1 big word
		m := make(map[string]int)

		re := regexp.MustCompile("[^0-9a-zA-Z]+")

		for _, word := range strings.Fields(value) {
			word = strings.ToLower(word)
			word = re.ReplaceAllLiteralString(word, "")
			if len(word) > 0 {
				m[word] = m[word] + 1
			}
		}
		var words []mapreduce.KeyValue
		for k, v := range m { //Transform map to WordCount Array
			words = append(words, mapreduce.KeyValue{k, strconv.Itoa(v)})
		}

		return words*/
	/*words := strings.Fields(value)
	for _, w := range words {
		kv := mapreduce.KeyValue{strings.ToLower(w), "1"}
		res = append(res, kv)
	}
	return res*/
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	sum := 0
	for _, v := range values {
		//	for v := range strings.Fields(values) {
		//	i := strconv.Itoa(v)
		//	if err != nil {
		//		log.Fatal(err)
		//	}
		//	fmt.Print(v, ",")
		tempSum, _ := strconv.Atoi(v)
		//	tempSum, _ := strconv.ParseInt(v, 10, 32)
		sum += tempSum
	}
	return strconv.Itoa(sum)

	//	return strconv.Itoa(len(values))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
